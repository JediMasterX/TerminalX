# nginx/conf.d/terminalx.conf.template
# Site configuration template with environment variable substitution

# ===============================================
# FQDN Access: ${DOMAIN} → TerminalX (HTTPS)
# ===============================================

# HTTP to HTTPS redirect for FQDN
server {
    listen 80;
    server_name ${SERVER_NAME};
    
    # Let's Encrypt ACME challenge location
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
        try_files $uri $uri/ =404;
    }
    
    # Redirect all other HTTP traffic to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
    
    # Health check endpoint (bypass redirect)
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
}

# HTTPS FQDN server for TerminalX
server {
    listen 443 ssl http2;
    server_name ${SERVER_NAME};
    
    # Access logging for HTTPS
    access_log /var/log/nginx/https_access.log main;
    error_log /var/log/nginx/https_error.log;
    
    # SSL Configuration using environment variables
    ssl_certificate ${SSL_CERT_PATH};
    ssl_certificate_key ${SSL_KEY_PATH};
    ssl_trusted_certificate ${SSL_CHAIN_PATH};
    
    # HSTS (HTTP Strict Transport Security)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Additional security headers for HTTPS
    add_header X-Forwarded-Proto $scheme always;
    add_header X-Real-IP $remote_addr always;
    
    # Rate limiting for the entire site
    limit_req zone=global burst=50 nodelay;
    
    # Main application proxy
    location / {
        proxy_pass http://terminalx_backend;
        
        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_read_timeout 86400;
        proxy_send_timeout 86400;
        proxy_connect_timeout 60;
        
        # Prevent proxy buffering for real-time applications
        proxy_buffering off;
        proxy_cache off;
        
        # Handle proxy errors gracefully  
        proxy_intercept_errors on;
        error_page 502 503 504 /50x.html;
    }
    
    # Authentication endpoints with rate limiting
    location ~ ^/(login|register|api/auth) {
        limit_req zone=login burst=10 nodelay;
        
        proxy_pass http://terminalx_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Additional security for auth endpoints
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
    }
    
    # API endpoints with rate limiting
    location ~ ^/api/ {
        limit_req zone=api burst=20 nodelay;
        
        proxy_pass http://terminalx_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # WebSocket connections for terminals (optimized)
    location ~ ^/ws/ {
        access_log /var/log/nginx/websocket.log websocket;
        
        proxy_pass http://terminalx_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket specific timeouts
        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s;
        proxy_connect_timeout 60s;
        
        # Disable buffering for WebSocket
        proxy_buffering off;
        proxy_cache off;
        
        # Keep connection alive
        proxy_set_header Connection "upgrade";
        proxy_set_header Upgrade $http_upgrade;
    }
    
    # Static assets caching
    location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        proxy_pass http://terminalx_backend;
        proxy_set_header Host $host;
        
        # Cache static assets
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Cache "STATIC";
        
        # Compress static assets
        gzip_static on;
    }
    
    # Error pages
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    # Deny access to hidden files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# ===============================================
# Direct IP Access: server_ip:8087 → TerminalX
# ===============================================

server {
    listen 8087;
    server_name _;  # Accept any hostname/IP
    
    access_log /var/log/nginx/direct_8087_access.log main;
    error_log /var/log/nginx/direct_8087_error.log;
    
    # Rate limiting for direct access
    limit_req zone=global burst=30 nodelay;
    
    # Health check
    location /health {
        access_log off;
        return 200 "terminalx-direct-healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Main proxy to TerminalX
    location / {
        proxy_pass http://terminalx_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support for direct access
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_read_timeout 86400;
        proxy_send_timeout 86400;
        proxy_buffering off;
    }
    
    # WebSocket specific location for direct access
    location ~ ^/ws/ {
        proxy_pass http://terminalx_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_read_timeout 3600s;
        proxy_send_timeout 3600s;
        proxy_buffering off;
    }
}

# ===============================================
# Direct IP Access: server_ip:3000 → SFTP Server
# ===============================================

server {
    listen 3000;
    server_name _;  # Accept any hostname/IP
    
    access_log /var/log/nginx/direct_3000_access.log main;
    error_log /var/log/nginx/direct_3000_error.log;
    
    # Rate limiting for SFTP access
    limit_req zone=global burst=20 nodelay;
    
    # Health check
    location /health {
        access_log off;
        return 200 "sftp-server-healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Proxy all traffic to SFTP Browser
    location / {
        proxy_pass http://sftp_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support for SFTP browser
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_read_timeout 86400;
        proxy_send_timeout 86400;
        proxy_buffering off;
        
        # SFTP specific headers
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
    }
}

# ===============================================
# Optional: Catch-all server for undefined hosts
# ===============================================

# Default server for undefined server names (security)
server {
    listen 80 default_server;
    listen 443 ssl default_server;
    server_name _;
    
    # Use a self-signed cert for default SSL
    ssl_certificate ${SSL_CERT_PATH};
    ssl_certificate_key ${SSL_KEY_PATH};
    
    # Log suspicious requests
    access_log /var/log/nginx/default_access.log main;
    
    # Return 444 (connection closed) for undefined hosts
    return 444;
}