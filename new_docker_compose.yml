version: '3.8'

services:
  # TerminalX Application
  terminalx:
    image: terminalx:1.1.3.2f
    container_name: terminalx
    restart: unless-stopped
    networks:
      - terminalx-network
    environment:
      - TD_PATH=/sources/indot.html
      - MOBY_PORT=9085
      - SFTP_HOST=                    # Leave empty to use current hostname
      - SFTP_PORT=3000               
      - SFTP_PROTOCOL=https          
      - TOKEN_SECRET=your_generated_secret_key_here
      - TOKEN_TTL_SECONDS=120
    expose:
      - "8087"

  # SFTP Browser Service  
  sftp-browser:
    image: sftp-server:1.0.2.1
    container_name: sftp-server
    restart: unless-stopped
    networks:
      - terminalx-network
    environment:
      - TOKEN_SECRET=your_generated_secret_key_here
      - TOKEN_MAX_TTL_SECONDS=300
      - SESSION_TIMEOUT=600000
    expose:
      - "3000"

  # Nginx Reverse Proxy Container
  nginx:
    image: nginx:alpine
    container_name: terminalx-nginx
    restart: unless-stopped
    ports:
      - "80:80"           # HTTP
      - "443:443"         # HTTPS  
      - "8087:8087"       # Direct TerminalX access
      - "3000:3000"       # Direct SFTP access
    networks:
      - terminalx-network
    environment:
      # Domain configuration
      - DOMAIN=terminalx.yourdomain.com
      - SERVER_NAME=terminalx.yourdomain.com
      
      # SSL configuration paths (host filesystem)
      - SSL_CERT_PATH=/etc/ssl/certs/terminalx.crt
      - SSL_KEY_PATH=/etc/ssl/private/terminalx.key
      - SSL_CHAIN_PATH=/etc/ssl/certs/terminalx-chain.crt
      
      # Upstream backend services
      - TERMINALX_BACKEND=terminalx:8087
      - SFTP_BACKEND=sftp-browser:3000
      
      # Performance settings
      - WORKER_PROCESSES=auto
      - WORKER_CONNECTIONS=1024
      - CLIENT_MAX_BODY_SIZE=100M
      
      # Security settings
      - ENABLE_HSTS=true
      - HSTS_MAX_AGE=31536000
      - ENABLE_RATE_LIMITING=true
      - LOGIN_RATE_LIMIT=5r/m
      - API_RATE_LIMIT=10r/s
    volumes:
      # Nginx configuration template
      - ./nginx/nginx.conf.template:/etc/nginx/nginx.conf.template:ro
      - ./nginx/conf.d/:/etc/nginx/templates/:ro
      
      # SSL certificates from host filesystem
      - /etc/ssl/certs/terminalx.crt:/etc/ssl/certs/terminalx.crt:ro
      - /etc/ssl/private/terminalx.key:/etc/ssl/private/terminalx.key:ro  
      - /etc/ssl/certs/terminalx-chain.crt:/etc/ssl/certs/terminalx-chain.crt:ro
      
      # Nginx logs on host
      - ./logs/nginx:/var/log/nginx
      
      # Let's Encrypt webroot for certificate challenges
      - ./letsencrypt/webroot:/var/www/certbot:ro
    depends_on:
      - terminalx
      - sftp-browser
    command: >
      /bin/sh -c "
      envsubst '$${DOMAIN},$${SERVER_NAME},$${SSL_CERT_PATH},$${SSL_KEY_PATH},$${SSL_CHAIN_PATH},$${TERMINALX_BACKEND},$${SFTP_BACKEND},$${CLIENT_MAX_BODY_SIZE},$${LOGIN_RATE_LIMIT},$${API_RATE_LIMIT}' 
      < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf &&
      envsubst '$${DOMAIN},$${SERVER_NAME},$${SSL_CERT_PATH},$${SSL_KEY_PATH},$${TERMINALX_BACKEND},$${SFTP_BACKEND}' 
      < /etc/nginx/templates/terminalx.conf.template > /etc/nginx/conf.d/terminalx.conf &&
      nginx -g 'daemon off;'"

  # SSL Certificate Management (Let's Encrypt)
  certbot:
    image: certbot/certbot
    container_name: terminalx-certbot
    restart: "no"
    environment:
      - DOMAIN=terminalx.yourdomain.com
      - EMAIL=admin@yourdomain.com
      - STAGING=false
    volumes:
      # Let's Encrypt certificates stored on host filesystem
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/lib/letsencrypt:/var/lib/letsencrypt
      - ./letsencrypt/webroot:/var/www/certbot
      - ./letsencrypt/logs:/var/log/letsencrypt
    command: >
      sh -c "
      if [ ! -f /etc/letsencrypt/live/$${DOMAIN}/fullchain.pem ]; then
        echo 'Obtaining SSL certificate for $${DOMAIN}...' &&
        certbot certonly 
          --webroot 
          --webroot-path=/var/www/certbot 
          --email $${EMAIL} 
          --agree-tos 
          --no-eff-email 
          $([ '$${STAGING}' = 'true' ] && echo '--staging' || echo '') 
          -d $${DOMAIN} &&
        echo 'Certificate obtained successfully!' &&
        ln -sf /etc/letsencrypt/live/$${DOMAIN}/fullchain.pem /etc/ssl/certs/terminalx.crt &&
        ln -sf /etc/letsencrypt/live/$${DOMAIN}/privkey.pem /etc/ssl/private/terminalx.key &&
        ln -sf /etc/letsencrypt/live/$${DOMAIN}/chain.pem /etc/ssl/certs/terminalx-chain.crt
      else
        echo 'Certificate already exists for $${DOMAIN}'
      fi"

  # Certificate renewal service (runs periodically)
  certbot-renew:
    image: certbot/certbot
    container_name: terminalx-certbot-renew
    restart: unless-stopped
    environment:
      - DOMAIN=terminalx.yourdomain.com
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/lib/letsencrypt:/var/lib/letsencrypt
      - ./letsencrypt/webroot:/var/www/certbot
      - ./letsencrypt/logs:/var/log/letsencrypt
    entrypoint: >
      /bin/sh -c "
      trap exit TERM;
      while :; do
        echo 'Checking for certificate renewal...';
        certbot renew --webroot --webroot-path=/var/www/certbot --quiet;
        if [ $$? -eq 0 ]; then
          echo 'Certificates renewed, updating symlinks...';
          ln -sf /etc/letsencrypt/live/$${DOMAIN}/fullchain.pem /etc/ssl/certs/terminalx.crt;
          ln -sf /etc/letsencrypt/live/$${DOMAIN}/privkey.pem /etc/ssl/private/terminalx.key;  
          ln -sf /etc/letsencrypt/live/$${DOMAIN}/chain.pem /etc/ssl/certs/terminalx-chain.crt;
          echo 'Reloading nginx...';
          docker exec terminalx-nginx nginx -s reload;
        fi;
        sleep 12h & wait $$!;
      done"

networks:
  terminalx-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16